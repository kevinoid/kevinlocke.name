# Enable content negotiation for requests over HTTPS
# Performing content negotiation on requests which get redirected results in
# the Content-Location (the negotiation result) being sent as Location, which
# is not ideal.
<If "%{HTTPS} == 'on'">
    Options +MultiViews
</If>

# Allow PHP to match negotiated response for any request.
# https://stackoverflow.com/a/24598848
# Note: MultiviewsMatch Handlers may work with mod_php, but does not appear to
# work with php-fpm.  (Not sure why, since it does use SetHandler.)
<FilesMatch ".+\.ph(ar|p|tml)$">
    MultiviewsMatch Any
</FilesMatch>

DirectoryIndex	index

# Note:  Be careful to avoid compounding errors due to failed negotiation (406)
# This is particularly likely for 404 when HTML is not accepted (since error
# document is an HTML document) so it can not be type-negotiated.
<If "%{HTTP_ACCEPT} =~ m#application/xhtml\+xml\s*(?:,|$)#i">
    ErrorDocument 400 /400.xhtml
    ErrorDocument 401 /401.xhtml
    ErrorDocument 403 /403.xhtml
    ErrorDocument 404 /404.xhtml
    ErrorDocument 500 /500.xhtml
</If>
<ElseIf "%{HTTP_ACCEPT} =~ m#text/html\s*(?:,|$)#i">
    ErrorDocument 400 /400.html
    ErrorDocument 401 /401.html
    ErrorDocument 403 /403.html
    ErrorDocument 404 /404.html
    ErrorDocument 500 /500.html
</ElseIf>
<Else>
    # Type negotiation would fail.  Name non-negotiated file explicitly.
    ErrorDocument 400 /400.html.html
    ErrorDocument 401 /401.html.html
    ErrorDocument 403 /403.html.html
    ErrorDocument 404 /404.html.html
    ErrorDocument 500 /500.html.html
</Else>

# mod_auto_index options
HeaderName README-files.txt
IndexOptions +XHTML

# Set common security/compatibility headers
Header set Content-Security-Policy: "default-src 'self'; frame-ancestors 'self'; form-action 'self'; block-all-mixed-content; report-uri /csp-report"
# Allow inline styles in SVG files and javadoc/phpdoc and my resume
# Note:  resp('Content-Type') is not set by mod_negotiation.c.
#        Use %{CONTENT_TYPE} instead.
Header edit Content-Security-Policy: "$" "; style-src 'self' 'unsafe-inline'" "expr=%{CONTENT_TYPE} =~ m#^image/svg\+xml# || %{REQUEST_URI} =~ m#(javadoc|phpdoc)\/# || %{REQUEST_URI} =~ m#/resume#"
# Allow inline scripts for javadoc
Header edit Content-Security-Policy: "$" "; script-src 'self' 'unsafe-inline'" "expr=%{REQUEST_URI} =~ m#javadoc\/#"
# Allow unsafe-inline for PDFs viewed in-browser <https://crbug.com/271452>
# Note:  'self' is also required for viewer to fetch PDF content.
# Note:  resp('Content-Type') is not set by mod_negotiation.c.
#        Use %{CONTENT_TYPE} instead.
Header edit Content-Security-Policy: "default-src 'self'" "$0 'unsafe-inline'" "expr=%{CONTENT_TYPE} =~ m#^application\/pdf#"

Header set X-Content-Type-Options: "nosniff"
Header set X-XSS-Protection: "1; mode=block"
Header set X-Frame-Options: "sameorigin"
Header set X-UA-Compatible: "IE=Edge"

# FollowSymLinks is required for rewriting
Options +FollowSymLinks

RewriteEngine On
RewriteBase /

# Note:  R without L in RewriteRules for single redirect to new URL with HTTPS
# Note:  QSA is not needed when replacement has no query string

# Rewrite old blog post URLs to their new locations
RewriteRule "^inquiry/sdlblitspeed/sdlblitspeed\.php$" "/bits/2007/08/01/sdl-blit-speed-comparison/" [DPI,R=permanent]
RewriteRule "^inquiry/sdlblitspeed/(.*)$" "/bits/2007/08/01/sdl-blit-speed-comparison/$1" [DPI,R=permanent]
RewriteRule "^inquiry(/.*)?$" "/bits$1" [DPI,R=permanent]

# Rewrite requests for php files to extensionless files, where absent
# FIXME: Would like to apply this rule even when PHP file exists
#        (to hide implementation details, since .php isn't permanent)
#        But can't make it work with MultiViews, even excluding %{IS_SUBREQ}.
RewriteCond "%{REQUEST_FILENAME}" !-f
RewriteRule "^(.*)\.php$" "$1" [DPI,R=permanent]

# Use URL with trailing slash as canonical URL for index pages
RewriteRule "^(.*/)index$" "$1" [DPI,R=permanent]

# Ensure all access to kevinlocke.name is done over HTTPS without www.
# This is for canonicalization, SEO, and security.
# https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/
# Note:  /.well-known/acme-challenge/ is excluded ACME SSL cert renewal checks.
# Note:  /.well-known/mta-sts.txt is excluded for MTA-STS, 3xx redirects disallowed

# First, handle absolute URLs in case rewriting has been done already
RewriteRule "^https?://(www\.)?kevinlocke.name(.*)$" "https://kevinlocke.name$2" [R=permanent,L]
RewriteRule "^(https?://.*)$" "$1" [L]

# Canonicalize kevinwlocke.com to kevinlocke.name (temporarily)
RewriteCond %{HTTP_HOST} =kevinwlocke.com [NC,OR]
RewriteCond %{HTTP_HOST} =www.kevinwlocke.com [NC]
RewriteCond %{REQUEST_URI} "!^/\.well-known/acme-challenge/"
RewriteCond %{REQUEST_URI} "!^/\.well-known/mta-sts\.txt"
RewriteRule ^/?(.*) "https://kevinlocke.name/$1" [R,L]

# Canonicalize any other unexpected hostname to kevinlocke.name (permanently)
RewriteCond %{HTTP_HOST} !=""
RewriteCond %{HTTP_HOST} !=kevinlocke.name [NC]
RewriteCond %{HTTP_HOST} !=ipv4.kevinlocke.name [NC]
RewriteCond %{HTTP_HOST} !=ipv6.kevinlocke.name [NC]
RewriteCond %{HTTP_HOST} !=testing.kevinlocke.name [NC]
RewriteCond %{REQUEST_URI} "!^/\.well-known/acme-challenge/"
RewriteCond %{REQUEST_URI} "!^/\.well-known/mta-sts\.txt"
RewriteRule ^/?(.*) "https://kevinlocke.name/$1" [R=permanent,L]

RewriteCond %{HTTPS} !=on
RewriteCond %{REQUEST_URI} "!^/\.well-known/acme-challenge/"
RewriteCond %{REQUEST_URI} "!^/\.well-known/mta-sts\.txt"
RewriteRule ^/?(.*) "https://%{HTTP_HOST}/$1" [R=permanent,L]

# Prevent access to .git directories
# Note:  L implied by F, so put after HTTPS redirect
RewriteRule "^(.*/)?\.git/" - [F]

# Set a cache expiration on 301 responses to prevent indefinite caching.
# (Since if we screw up a redirect, there would be no way to fix it.)
# FIXME:  Should set Expires, but can't find a way to conditionally set it
Header always set Cache-Control "max-age=86400" "expr=%{REQUEST_STATUS} == 301"

# Require HTTPS for the next 6 months on kevinlocke.name and subdomains
# Note: Has no effect when served without SSL, so don't bother.
Header always set Strict-Transport-Security "max-age=15768000; includeSubDomains; preload" "expr=%{HTTPS} == 'on'"

# Define media types for negotiation
# We use .gz as an encoding, not a type.
RemoveType .gz
# .tar.gz is an exception and should be served as application/gzip
<FilesMatch ".+\.tar\.gz$">
    RemoveEncoding .gz
    # Note:  Can use application/x-gzip for backwards-compatibility
    AddType application/gzip .gz
    # Alternatively:
    #ForceType application/gzip
</FilesMatch>

# Prioritize XHTML slightly above HTML
<If "%{HTTP_ACCEPT} =~ m#application/xhtml\+xml#i">
    AddType text/html;qs=0.99 .html
    AddType application/xhtml+xml .xhtml
</If>
<Else>
    AddType text/html .html
    AddType application/xhtml+xml;qs=0.99 .xhtml
</Else>

# Remove qs parameter incorrectly sent by MultiViews due to
# https://bz.apache.org/bugzilla/show_bug.cgi?id=53595
Header always edit "Content-Type" ";\s*qs=[0-9]*(?:\.[0-9]+)?\s*(?=;|$)" ""

# Remove Content-Location of PHP files added by MultiViews
# PHP is an implementation detail and shouldn't be a public/permanent URL
Header always unset Content-Location "expr=%{resp:Content-Location} =~ m/\.php$/"

# Define character sets (for negotiation and user agent interpretation)
AddCharset utf-8 .html
AddCharset utf-8 .xhtml
AddCharset utf-8 .atom

# Define encodings (for negotiation of pre-compressed files)
# Note:  Can't use .br extension, which conflicts with ISO-693 br language code
#        Using .bro as currently in https://github.com/google/brotli/pull/163
AddEncoding br .bro
AddEncoding gzip .gz

# Set the default Content-Language to English (since most pages are)
DefaultLanguage en

# Although the DEFLATE filter will only compress when the request accepts gzip
# and there is the response is not already compressed, mod_filter applies the
# header changes (e.g. removing Etag, setting Accept-Ranges: none) whenever
# the provider matches.  To avoid this, only match the provider when it has
# a chance of actually applying.
#
# Note:  %{resp:Content-Encoding} is not set by mod_negotiation.c, which only
# sets the content_encoding field of the response struct.  Check
# %{resp:Content-Location} which has the matched file extension, to handle it.
<IfModule mod_deflate.c>
    <If "%{req:Accept-Encoding} =~ m#\bgzip\b#i">
        # Gzip content which may benefit from the compression
        FilterDeclare COMPRESS CONTENT_SET
        # Compress response with Content-Type:
        # * Starting with text/
        # * application/javascript and application/x-javascript
        # * application/json, application/x-yaml
        # * Ending with /json or +json
        # * Ending with /xml or +xml
        FilterProvider COMPRESS DEFLATE "%{Content_Type} =~ m#^(text/[^;]+|application/(x-)?(javascript|yaml)|[^;]+[/+](json|xml)) *(;|$)#i && -z %{resp:Content-Encoding} && %{resp:Content-Location} !~ m/\.(bro?|gz)$/"
        FilterChain COMPRESS
        FilterProtocol COMPRESS DEFLATE change=yes,byteranges=no
    </If>
</IfModule>
